[
["index.html", "Internet of Things for Smart Industry Chapter 1 Welcome", " Internet of Things for Smart Industry Franz Maurer, Witek ten Hove &amp; Deny Smeets 2017-06-05 Chapter 1 Welcome This is an accompanying book to the HAN Minor Smart Industry and covers the major topics regarding the Internet of Things (IoT) implementation in an industrial setting. "],
["intro.html", "Chapter 2 Introduction to IoT", " Chapter 2 Introduction to IoT The IoT is the product of physical objects, controllers, sensors and actuators and the internet (McEwen and Cassimally 2013). The first reference to the IoT was in 1982, when researchers at Carnegie Mellon University developed the world’s first IoT-enabled Coke Machine. Mark Weiser developed the concept further in the early 90s; and Kevin Ashton coined the term ‘Internet of Things’ around 1999. References "],
["capabilities.html", "Chapter 3 IoT Capabilities", " Chapter 3 IoT Capabilities Your browser does not support this format. "],
["framework.html", "Chapter 4 IoT Framework", " Chapter 4 IoT Framework We describe our methods in this chapter. "],
["markets.html", "Chapter 5 IoT Markets 5.1 Example one 5.2 Example two", " Chapter 5 IoT Markets Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["fundamentals.html", "Chapter 6 IoT Fundamentals", " Chapter 6 IoT Fundamentals We have finished a nice book. "],
["sensors.html", "Chapter 7 Sensors", " Chapter 7 Sensors We have finished a nice book. "],
["communication.html", "Chapter 8 Data Communication", " Chapter 8 Data Communication We have finished a nice book. "],
["cloud.html", "Chapter 9 Cloud Storage 9.1 Database Systems 9.2 Things in a network 9.3 Amazon Web Services", " Chapter 9 Cloud Storage After sensors start to send data it is necessary that you define a place where that data should be stored. In the context of IoT the Cloud is a place somewhere on the internet where a provider allows recognized sensors to store their raw data in a database. You as the owner has access to that database, are able to program it and know how results could be made visible on dashboards. So it is not necessary anymore to maintain your own private servers in your own data centers, but cloud platform companies are now taking over that role. Raw data is in fact meaningless. You will have to analyze it, reshuffle, run statistics on it, correlate it with other data, watch for exceptional values and so on to make raw sensor data valuable for your business goals. We will touch on data analytics, machine learning and data science in section 13. In this chapter we will look into data, their place in the IoT infrastructure and explore one of the many cloud solutions. 9.1 Database Systems As most IoT devices have very limited memory resources, the data they produce has to be stored elsewhere. We discussed the data communication possibilities in section 8. In theory the data could be gathered into a simple text file and applications could read from this source. However we soon would encounter some annoying practical problems. For instance while data is written to a text file it is blocked. This would mean other devices can not add their data resulting in data loss. Also a text file is not the most efficient user of memory and its size would grow exponentially when used in a professional application with large numbers of devices and users. Other issues include lack of search and filtering facilities and connecting to other data tables. The above mentioned problems are not uniquely related to the IoT system. It translates to any client server environment. Database systems have been developed to cope with the challenges of efficiently creating large quantities of data, read records, and update and delete them. These basic database functionalities have been summarized in the CRUD acronym. The most common language for doing CRUD operations on a database is SQL (Structured Query Language). It has a rather human friendly syntax. For example this is the instruction for retrieving a selection of data from a data table (What do you think it will return?): SELECT * FROM SensorData WHERE Weekday = &#39;Monday&#39; Table 9.1: An example database table: SensorData DeviceID Weekday Temperature B2 Monday -8.8 A4 Monday -8.1 A2 Monday -8.6 B3 Monday -8.6 A1 Monday -8.4 A3 Monday -9.1 A1 Monday -8.4 B2 Tuesday -8.7 B3 Tuesday -8.1 A3 Tuesday -8.5 A4 Tuesday -9.0 A database consists of many tables. These tables can be related through key variables. For instance one table can contain sensor data while another table contains the meta data per device. These tables can be combined via a shared variable (field) containing the device IDs. When the meta data includes location data (e.g. longitude/latitude) you could draw maps with the temperature measurements. Databases that follow the above described structure belong to the category of Relational Database Systems (RDBS). Popular (open source) instances are PostgreSQL and MySQL. Another category of database systems that is gaining attention are the NoSQL systems. An example is MongoDB (also open source). An important difference between the two categories is that an RDBS can only hold one value per cell in a table (like a spreadsheet), whereas a NoSQL database can hold nested vectors of values in one cell (like JSON). ## [ ## { ## &quot;DeviceID&quot;: &quot;A1&quot;, ## &quot;Weekday&quot;: &quot;Monday&quot;, ## &quot;Temperature&quot;: [-8.4, -8.4] ## }, ## { ## &quot;DeviceID&quot;: &quot;A2&quot;, ## &quot;Weekday&quot;: &quot;Monday&quot;, ## &quot;Temperature&quot;: [-8.6] ## }, ## { ## &quot;DeviceID&quot;: &quot;A3&quot;, ## &quot;Weekday&quot;: &quot;Monday&quot;, ## &quot;Temperature&quot;: [-9.1] ## }, ## { ## &quot;DeviceID&quot;: &quot;A4&quot;, ## &quot;Weekday&quot;: &quot;Monday&quot;, ## &quot;Temperature&quot;: [-8.1] ## }, ## { ## &quot;DeviceID&quot;: &quot;B2&quot;, ## &quot;Weekday&quot;: &quot;Monday&quot;, ## &quot;Temperature&quot;: [-8.8] ## }, ## { ## &quot;DeviceID&quot;: &quot;B3&quot;, ## &quot;Weekday&quot;: &quot;Monday&quot;, ## &quot;Temperature&quot;: [-8.6] ## } ## ] (Video: Google Developers 2012) Another interesting alternative database architecture is the graph database. In a graph database data is represented as a network where the records are stored in nodes and the relationships in the edges. This is a very convenient solution when you are more interested in the relationships between objects rather than doing aggregations on the objects (sums, averages, etc). (Video: Neo4j - the World’s Leading Graph Database 2016) 9.2 Things in a network 9.3 Amazon Web Services References "],
["privacy.html", "Chapter 10 Privacy", " Chapter 10 Privacy We have finished a nice book. "],
["security.html", "Chapter 11 Security", " Chapter 11 Security We have finished a nice book. "],
["encryption.html", "Chapter 12 Encryption", " Chapter 12 Encryption We have finished a nice book. "],
["analytics.html", "Chapter 13 Data Analytics", " Chapter 13 Data Analytics Fig.12.1 - Data Analytics versus Science (J 2013) References "],
["apps.html", "Chapter 14 Dashboards and Apps", " Chapter 14 Dashboards and Apps We have finished a nice book. "],
["opensource.html", "Chapter 15 Open Source Systems", " Chapter 15 Open Source Systems We have finished a nice book. "],
["arduino.html", "Chapter 16 Arduino Programming", " Chapter 16 Arduino Programming We have finished a nice book. "],
["references.html", "References", " References "]
]
